@page "/"

@using GBX.NET
@using GBX.NET.Engines.Game

@inject SetupService SetupService
@inject InitStageService GeneralBuildService

<header>
    <div>
        <img src="img/logo.webp" height="200" />
    </div>
    <aside>
        <button class="build" @onclick="() => GeneralBuildService.BuildAsync()">INIT</button>
    </aside>
</header>

<div class="browser">
    <div class="browsable-line">
        @foreach (var name in new[] { "Alpine", "Rally", "Speed", "Island", "Bay", "Coast", "Stadium" })
        {
            if (SetupService.Collections.TryGetValue(name, out var collection))
            {
                <button class="browsable directory @(name == SelectedCollection ? "selected" : "")" @onclick="() => SetupCollectionBlocks(collection)">@collection.DisplayName</button>
            }
        }

        @if (IsLoading)
        {
            <Loader></Loader>
        }
    </div>


    @if (SelectedCollection is not null)
    {
        var currentDirs = SetupService.Collections[SelectedCollection].BlockDirectories;

        <div class="env-browser">
            <div class="env-folders">
                <div class="browsable-line">
                    @foreach (var (name, _) in currentDirs)
                    {
                        <button class="browsable directory @(SelectedDirectories.Count > 0 && name == SelectedDirectories[0] ? "selected" : "")" @onclick="() => VisitDirectory(0, name)">@name</button>
                    }
                </div>

                @for (var i = 0; i < SelectedDirectories.Count; i++)
                {
                    var dir = SelectedDirectories[i];
                    var dirs = currentDirs[dir].Directories;
                    var currentBlocks = currentDirs[dir].Blocks;

                    <div class="browsable-line">
                        @foreach (var (name, _) in dirs)
                        {
                            <button class="browsable directory @(SelectedDirectories.Count > i + 1 && name == SelectedDirectories[i + 1] ? "selected" : "")" @onclick="() => VisitDirectory(SelectedDirectories.IndexOf(dir) + 1, name)">@name</button>
                        }

                        @foreach (var block in currentBlocks)
                        {
                            <button class="browsable block"><CollectorIcon Name="@block.Key" WebpData="@block.Value.WebpIcon" /></button>
                        }
                    </div>

                    currentDirs = dirs;
                }

            </div>
            <div class="env-root-blocks">
                @foreach (var (name, block) in SetupService.Collections[SelectedCollection].RootBlocks)
                {
                    <button class="browsable block"><CollectorIcon Name="@name" WebpData="@block.WebpIcon" /></button>
                }
            </div>
        </div>
    }
</div>

@code {
    public string? SelectedCollection { get; set; }

    public List<string> SelectedDirectories { get; } = new();

    public bool IsLoading { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await SetupService.SetupCollectionsAsync();
            StateHasChanged();
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task SetupCollectionBlocks(CollectionModel collection)
    {
        IsLoading = true;
        StateHasChanged();
        await Task.Delay(20);

        SetupService.SetupCollection(collection);

        IsLoading = false;

        SelectedDirectories.Clear();
        SelectedCollection = collection.Id;
    }

    private void VisitDirectory(int index, string name)
    {
        if (index < SelectedDirectories.Count)
        {
            SelectedDirectories.RemoveRange(index, SelectedDirectories.Count - index);
        }

        SelectedDirectories.Add(name);
    }
}